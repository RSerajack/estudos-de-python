Funções usuais em python:
==========================
input(): Entrada;
print(): saída;
int(): Passa todo o conteúdo dentro da função para o 'tipo' inteiro;
str(): Passa todo o conteúdo dentro da função para o 'tipo' string;
float(): Passa todo o conteúdo dentro da função para o 'tipo' ponto flutuante (real);

- // -

len(): Retorna o tamanho da cadeia de conteúdo dentro da função (basicamente, o tamanho da 'string')
	Lembre-se, 'len' vem de 'lengh' que significa comprimento!
	Também pode ser usado para retornar o tamanho de uma lista!

sorted(): Retorna o conteúdo dentro da função ordenando em ordem alfanúmerica.
	Possui algums parâmetros: sorted(lista, key=function, reverse=boorleano)
	O primeiro é padrão, seria a lista a ser ordenada.
	key: é o parâmetro de ordenação, por padrão a ordem é alfabética, mas pode-se usar outras funções como parâmetro de ordenação.
	reverse: Parâmetro do tipo boorleano (verdadeiro ou falso) que indica se a lista será ou não invertida, por padrao é falso!

===========================

Propriedades usuais em python
	Lembre-se, propriedades são funções nativas que são chamadas para alterar valores ou como métodos que extrai valores de um objeto.
	São chamadas da seguinte forma: 'exemplo.funcao()'
===========================
strip(): Remove os caracteres de espaço de um tipo string
	lstrip(): Mesmo que o anterior, porém, só remove os espaços a ESQUERDA (Left, por isso o l);
	rstrip(): Mesmo que o anterior, porém, só remove os espaços a DIREITA (Right, por isso o r);
split(): Separa frases de uma string como elementos de uma lista; 
	É usado para retornar um valor, então você precisa armazenar isso em algum lugar!
count(): Retorna o número de vezes que um caractere aparece em uma string, tem um parâmetro que é o caractere de busca;
	Assim: 'string.count(t)' ---> Dessa forma ele vai contar quantos 't' tem na string
replace(): Substitui uma palavra por outra em uma string, possui dois paramêtros, a palavra a ser substituida e a que vai tomar seu lugar;
	Assim: string.replace('nao', 'nop') ----> Está substituindo 'nao' por 'nop'
find(): Encontra um item de busca e retorna sua posição(onde começa);
	Assim: string.find("exemplo") ----> Procura onde a palavra 'exemplo' começa na string.
upper(): Muda o valor da string para todos os caracteres em caixa alta;
lower(): Muda o valor da string para todos os caracteres em minúsculo;	
		
- // -

sort(): Altera o conteúdo de uma lista, colocando-a em ordem alfanumérica; em parâmetros igual a função embutida 'sorted()';
reverse(): Inverte a ordem de uma lista;




===========================

Estruturas python

---- Estrutura e condição if ----
É um pouco diferente da estrutura usual em blocos que estamos acostumados. Em python, if tem a seguinte forma:
	if condição :
	   #linhas de códigos

É possível nota que ainda continua simples, basta observar que python usa o sistema identado, após os dois pontos, tudo oq estiver vinculado a ele
será executado, caso a condição seja verdadeira.
If e else segue o mesmo raciocínio, assim:
	if condição :
	   #linhas de códigos
	else:
	   #linhas de códigos

Basicamente isso, caso a condição seja verdadeira, executa o que tem dentro do if, caso contrário, executa o que está vinculado ao else.
Obs.: Apesar dos dois serem usados em sequência, tem que tomar cuidado pro else não ficar vinculado com o if, ou seja, if e else precisam estar com o mesmo 
tanto de recuo. O exemplo a seguir está INCORRETO:
	if condição:
	   #linhas de código
	   else:               <------------ está identado ao if, precisava ter o mesmo recuo, ou seja, if e else precisam estar ALINHADOS
	   #linhas de código   <------------ Não está identado ao else, logo nãp funcionaria, precisa estar com um recuo a mais em relação ao else ou na 
	   mesma linha logo após os dois pontos ':'.
	   
Imagino que vocês devem lembrar do famigerado "else if" em LOP ou outras linguagens de programação, ele serve para aninhar de forma prática várias condições, 
aqui existe um estrutura própria pra isso que fica entre o if e o else, chama-se 'elif', basta usar como se fossem outras confições, semelhante ao exemplo 
correto de if e else. Assim:

-Versão .py                                -Versão .js
	if condição:                    |      if(condição) {
	   #linhas de código            |        //linhas de código
	elif condição2:                 |      } else if(condição2) {
	   #linhas de código            |        // linhas de código
	elif condição3:                 |      } else if(condição3) {
	   #linhas de código            |        //linhas de código
	else:                           |      } else {
	   #linhas de código            |         //Linhas de código
                                        |      }
					

É possível ter situações em que um fator depende de mais de uma condição ao mesmo tempo, nesses casos, usamos o operador 'and' (e), dessa forma:
	if condição1 and condição2:
	   #código
	Dessa forma, o código identado ao if só acontece se ambas, condição1 e condição2, forem verdadeiras.

Da mesma forma, é possível ter condicionais que podem depender de mais de um condição, mas que não necessáriamente todas elas, nesses momentos usamos o 
operador 'or' (ou). Assim:
	if condição1 or condição2:
	   #código
	Nesse caso, o código identado ao if só irá acontecer se ou a condição1 ou a condição2 forem verdadeiras.

Agora, no caso de você ter alguma condição que simplesmente não faz nada, mas que é importante definir que ela realmente não faz nada, é possível declarar
isso usando o 'pass', dessa forma:
	if condição:
	   pass


Também é possível usar if em listas, um bom exemplo é verificar se um determinado valor existe em uma lista:
	if elemento in lista_exemplo:
	   #código
	//Usano o operador 'in', é possível verificar se o valor 'elemento' existe em 'lista_exemplo'.
	
Também é possível ter o efeito contrário, ou seja, de um valor não estar na lista. Basta negar sua existência usando o 'not':
	if elemento not in lista_exemplo:
	   #código
	//Se o valor 'elemento' não estiver presente em 'lista_exemplo', o código dentro do if é executado.
	
---------------------------------------------------------------------------------------------------
===========================
	


